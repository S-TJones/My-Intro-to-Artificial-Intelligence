{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Comp3220 Assignment_Titanic","provenance":[{"file_id":"1cFFjg4a4nW_vDGMMlAMqhhq7bCiIZ37R","timestamp":1624494330007},{"file_id":"1NErrsk1dzOCI9oJj1z7kWaRY-Kvc1TjZ","timestamp":1572277724191}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"GZEe5N2dPUGx"},"source":["# Titanic Dataset"]},{"cell_type":"markdown","metadata":{"id":"GUiGgYULPdw5"},"source":["This notebook is based on the Titanic Dataset Machine Learning from Kaggle. Complete this notebook to complete the assignment. "]},{"cell_type":"code","metadata":{"id":"nlKoJIzpXHCD"},"source":["import pandas as pd\n","import tensorflow as tf\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yOnwjlZwMhvi"},"source":["## Data Extraction"]},{"cell_type":"markdown","metadata":{"id":"XCcI8jUNX3Ud"},"source":["Read from train.csv into a pandas data frame(call it df)"]},{"cell_type":"code","metadata":{"id":"eflOahsWXVyo"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BZ7eTH73MlQA"},"source":["## Data Visualization"]},{"cell_type":"markdown","metadata":{"id":"--xmmWkDX_9j"},"source":["Try viewing the first five rows of your data (Note. try the head function)"]},{"cell_type":"code","metadata":{"id":"sdoOcgYLX_Ms","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1572231802086,"user_tz":300,"elapsed":528,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"5b2041b0-48d6-4f63-9a50-73bacf58e391"},"source":[""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","3            4         1       1  ...  53.1000  C123         S\n","4            5         0       3  ...   8.0500   NaN         S\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":160}]},{"cell_type":"markdown","metadata":{"id":"SePud3vrG6z-"},"source":["Let's visualize our data bit and see number of peopled that died for each ticket class"]},{"cell_type":"code","metadata":{"id":"UkMa-0NWpgKj","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1572231802997,"user_tz":300,"elapsed":545,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"9922fade-7746-43db-f3cd-94daa4cb37a9"},"source":["df['Pclass'][df['Survived']==0].hist()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fe827fbd940>"]},"metadata":{"tags":[]},"execution_count":161},{"output_type":"display_data","data":{"image/png":"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\nrj4FtNYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"VlMaTAzSMuCA"},"source":["## Data Cleaning/PreProcessing"]},{"cell_type":"markdown","metadata":{"id":"p70X6qFqnDwg"},"source":["Before we contiune let us do some preprocessing on our data. Preprocessing is the process a data scientist or ML engineer goes through to make sure the data is clean and ready for the model. One example is checking to see if there are any null values in any of the columns and replacing them. Let's see if the Age column has any."]},{"cell_type":"code","metadata":{"id":"MXAiypF4cSv1","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1572231804357,"user_tz":300,"elapsed":427,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"7575b505-eded-4ea0-d61b-4f5d3b9788ca"},"source":["df['Age'].isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["177"]},"metadata":{"tags":[]},"execution_count":163}]},{"cell_type":"markdown","metadata":{"id":"3qvwGzgRIduG"},"source":["It does so lets us fill those will the median value for age"]},{"cell_type":"code","metadata":{"id":"9adC1tipmyMf"},"source":["df['Age'] = df['Age'].fillna(df['Age'].median())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hkBM8F3yDyHE"},"source":["Here we are normalizing the age column by subtracting the mean and dividing by the standard deviation to keep values small"]},{"cell_type":"code","metadata":{"id":"BHFKFs-sQjM5"},"source":["df['Age'] = (df['Age']-df['Age'].mean())/df['Age'].std()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"at_hWSVhJS2C"},"source":["Let's see how that columns looks now"]},{"cell_type":"code","metadata":{"id":"sI57ptfPIH6e"},"source":["df['Age']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xSsLKk4zEvuW"},"source":["Try to do the same for the fare column"]},{"cell_type":"code","metadata":{"id":"cH0OYwGlIgZ6"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YR5r_r6VJV9f"},"source":["Let's see how the far column looks now"]},{"cell_type":"code","metadata":{"id":"N2bbflM7IKfC"},"source":["df['Fare']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FAPZIecpM1rj"},"source":["## Feature Engineering"]},{"cell_type":"markdown","metadata":{"id":"Z7lELUrsYvWq"},"source":["Now Time to do some feature engineering. Extract values from columns you can use as features(hint try to use numerical columns). Store it an variable called X."]},{"cell_type":"code","metadata":{"id":"pgJ4Ik2HKPnQ"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Chb_URSiEWIt"},"source":["Let's see how our input data looks"]},{"cell_type":"code","metadata":{"id":"afj-TxpVLegp","colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1572233252511,"user_tz":300,"elapsed":1483,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"d9af30d2-53d6-4786-9450-79bace490931"},"source":["X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 3.        , -0.5654189 ,  1.        ,  0.        , -0.50216314,\n","         0.        ],\n","       [ 1.        ,  0.66348839,  1.        ,  0.        ,  0.78640362,\n","         1.        ],\n","       [ 3.        , -0.25819208,  0.        ,  0.        , -0.48857985,\n","         1.        ],\n","       ...,\n","       [ 3.        , -0.10457867,  1.        ,  2.        , -0.1761643 ,\n","         1.        ],\n","       [ 1.        , -0.25819208,  0.        ,  0.        , -0.04435613,\n","         0.        ],\n","       [ 3.        ,  0.20264816,  0.        ,  0.        , -0.49210144,\n","         0.        ]])"]},"metadata":{"tags":[]},"execution_count":215}]},{"cell_type":"markdown","metadata":{"id":"1x3ieOgWLVMG"},"source":["Extract the labels (Survived column) into Y"]},{"cell_type":"code","metadata":{"id":"dH_lS3XUYI8L"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EfmzubpIEhkM"},"source":["Let's see how our labels look"]},{"cell_type":"code","metadata":{"id":"gLgZPXwIYeCz","colab":{"base_uri":"https://localhost:8080/","height":714},"executionInfo":{"status":"ok","timestamp":1572233256211,"user_tz":300,"elapsed":829,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"149c10c0-b4e7-44ec-b625-026ae33b4d68"},"source":["Y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n","       1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n","       1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n","       1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0,\n","       1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,\n","       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n","       0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n","       1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0,\n","       1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,\n","       0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0,\n","       0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","       1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n","       0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1,\n","       1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,\n","       0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,\n","       0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0,\n","       0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0,\n","       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0,\n","       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n","       1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n","       1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n","       0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1,\n","       1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n","       1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,\n","       0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,\n","       0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n","       0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n","       1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,\n","       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,\n","       0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0,\n","       1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,\n","       0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n","       0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n","       0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n","       0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,\n","       1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0])"]},"metadata":{"tags":[]},"execution_count":216}]},{"cell_type":"markdown","metadata":{"id":"Guf5v1CGMwof"},"source":["Let's spilt our dataset into train and test (X_train, X_test, y_train, y_test).Use the train_test_split function from sklearn. Use 30% of the data for test"]},{"cell_type":"code","metadata":{"id":"-VvnER4hYekI"},"source":["\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PVWHKIzNJiHZ"},"source":["Let us view the shape of the train data. The first number represents how many rows, the second represents how many columns or features."]},{"cell_type":"code","metadata":{"id":"kwFSyX0NNUyM","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1572231912186,"user_tz":300,"elapsed":180,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"de9980b3-799f-4dde-e80d-3211d12541ca"},"source":["X_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(712, 1)"]},"metadata":{"tags":[]},"execution_count":204}]},{"cell_type":"markdown","metadata":{"id":"qSp7NFK2JxqH"},"source":["Let us do the same for the test data"]},{"cell_type":"code","metadata":{"id":"-zCv7oHDNWO2","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1572231913337,"user_tz":300,"elapsed":410,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"74563a20-e783-4b6e-c31e-e21abd976521"},"source":["X_test.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(179, 1)"]},"metadata":{"tags":[]},"execution_count":205}]},{"cell_type":"markdown","metadata":{"id":"iOeNCoGNMQRU"},"source":["## Logistic Regression"]},{"cell_type":"markdown","metadata":{"id":"ao1HjEmNNqnf"},"source":["Let us create a model and fit the model to the train dataset.Let us use the LogisticRegression model from sklearn."]},{"cell_type":"code","metadata":{"id":"-dOF_vVzNYdb"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3KNZcbH3OT9Z"},"source":["Let's test the model. (Call the predict function on the model save the output in a variable)"]},{"cell_type":"code","metadata":{"id":"3Blc0nrpOTSA"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3TcK60OPOxBU"},"source":["Let us evaluate the accuracy of the model. Try using the accuracy score function from sklearn"]},{"cell_type":"code","metadata":{"id":"z6o406XLPY30"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6J-7ZtWcMTfZ"},"source":["## Neural Network"]},{"cell_type":"markdown","metadata":{"id":"jsm00GdNQcix"},"source":["Now let's try the same with a neural network. We will create a small neural network with some hidden layers and an output layer. (Note you are free to design this yourself). The network should output one value (try using sigmoid activation for last layer)."]},{"cell_type":"code","metadata":{"id":"D9TWVUFWPhn5"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kYUDSIR6G7HA"},"source":["Now let us fit our model.Remeber to use the test data created from above as the validation data."]},{"cell_type":"code","metadata":{"id":"6cROpajaYsd5","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1572228739314,"user_tz":300,"elapsed":19649,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"90a535e7-51e1-452f-c950-7b5c4070f4b7"},"source":[""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Train on 712 samples, validate on 179 samples\n","Epoch 1/150\n","712/712 [==============================] - 1s 884us/sample - loss: 0.7366 - accuracy: 0.5758 - val_loss: 0.6797 - val_accuracy: 0.6480\n","Epoch 2/150\n","712/712 [==============================] - 0s 189us/sample - loss: 0.7284 - accuracy: 0.5927 - val_loss: 0.6735 - val_accuracy: 0.6592\n","Epoch 3/150\n","712/712 [==============================] - 0s 162us/sample - loss: 0.7209 - accuracy: 0.6039 - val_loss: 0.6680 - val_accuracy: 0.6648\n","Epoch 4/150\n","712/712 [==============================] - 0s 174us/sample - loss: 0.7139 - accuracy: 0.6039 - val_loss: 0.6622 - val_accuracy: 0.6872\n","Epoch 5/150\n","712/712 [==============================] - 0s 182us/sample - loss: 0.7068 - accuracy: 0.6025 - val_loss: 0.6568 - val_accuracy: 0.7151\n","Epoch 6/150\n","712/712 [==============================] - 0s 166us/sample - loss: 0.7002 - accuracy: 0.6180 - val_loss: 0.6515 - val_accuracy: 0.7318\n","Epoch 7/150\n","712/712 [==============================] - 0s 159us/sample - loss: 0.6939 - accuracy: 0.6362 - val_loss: 0.6467 - val_accuracy: 0.7318\n","Epoch 8/150\n","712/712 [==============================] - 0s 160us/sample - loss: 0.6876 - accuracy: 0.6348 - val_loss: 0.6420 - val_accuracy: 0.7263\n","Epoch 9/150\n","712/712 [==============================] - 0s 152us/sample - loss: 0.6815 - accuracy: 0.6489 - val_loss: 0.6371 - val_accuracy: 0.7151\n","Epoch 10/150\n","712/712 [==============================] - 0s 155us/sample - loss: 0.6757 - accuracy: 0.6615 - val_loss: 0.6327 - val_accuracy: 0.7151\n","Epoch 11/150\n","712/712 [==============================] - 0s 177us/sample - loss: 0.6701 - accuracy: 0.6643 - val_loss: 0.6283 - val_accuracy: 0.7151\n","Epoch 12/150\n","712/712 [==============================] - 0s 174us/sample - loss: 0.6645 - accuracy: 0.6713 - val_loss: 0.6239 - val_accuracy: 0.7263\n","Epoch 13/150\n","712/712 [==============================] - 0s 177us/sample - loss: 0.6590 - accuracy: 0.6854 - val_loss: 0.6198 - val_accuracy: 0.7263\n","Epoch 14/150\n","712/712 [==============================] - 0s 176us/sample - loss: 0.6538 - accuracy: 0.6924 - val_loss: 0.6159 - val_accuracy: 0.7263\n","Epoch 15/150\n","712/712 [==============================] - 0s 166us/sample - loss: 0.6489 - accuracy: 0.6994 - val_loss: 0.6120 - val_accuracy: 0.7318\n","Epoch 16/150\n","712/712 [==============================] - 0s 158us/sample - loss: 0.6440 - accuracy: 0.7022 - val_loss: 0.6085 - val_accuracy: 0.7263\n","Epoch 17/150\n","712/712 [==============================] - 0s 161us/sample - loss: 0.6395 - accuracy: 0.7037 - val_loss: 0.6047 - val_accuracy: 0.7151\n","Epoch 18/150\n","712/712 [==============================] - 0s 164us/sample - loss: 0.6348 - accuracy: 0.7065 - val_loss: 0.6011 - val_accuracy: 0.7039\n","Epoch 19/150\n","712/712 [==============================] - 0s 172us/sample - loss: 0.6305 - accuracy: 0.7107 - val_loss: 0.5980 - val_accuracy: 0.6983\n","Epoch 20/150\n","712/712 [==============================] - 0s 168us/sample - loss: 0.6264 - accuracy: 0.7065 - val_loss: 0.5948 - val_accuracy: 0.6872\n","Epoch 21/150\n","712/712 [==============================] - 0s 170us/sample - loss: 0.6224 - accuracy: 0.7065 - val_loss: 0.5918 - val_accuracy: 0.6872\n","Epoch 22/150\n","712/712 [==============================] - 0s 180us/sample - loss: 0.6185 - accuracy: 0.7022 - val_loss: 0.5886 - val_accuracy: 0.6872\n","Epoch 23/150\n","712/712 [==============================] - 0s 187us/sample - loss: 0.6145 - accuracy: 0.7008 - val_loss: 0.5857 - val_accuracy: 0.6872\n","Epoch 24/150\n","712/712 [==============================] - 0s 173us/sample - loss: 0.6110 - accuracy: 0.7022 - val_loss: 0.5829 - val_accuracy: 0.6927\n","Epoch 25/150\n","712/712 [==============================] - 0s 161us/sample - loss: 0.6076 - accuracy: 0.7051 - val_loss: 0.5804 - val_accuracy: 0.6983\n","Epoch 26/150\n","712/712 [==============================] - 0s 158us/sample - loss: 0.6045 - accuracy: 0.7065 - val_loss: 0.5778 - val_accuracy: 0.6983\n","Epoch 27/150\n","712/712 [==============================] - 0s 183us/sample - loss: 0.6012 - accuracy: 0.7093 - val_loss: 0.5753 - val_accuracy: 0.6983\n","Epoch 28/150\n","712/712 [==============================] - 0s 171us/sample - loss: 0.5983 - accuracy: 0.7065 - val_loss: 0.5729 - val_accuracy: 0.6983\n","Epoch 29/150\n","712/712 [==============================] - 0s 163us/sample - loss: 0.5954 - accuracy: 0.7051 - val_loss: 0.5706 - val_accuracy: 0.6983\n","Epoch 30/150\n","712/712 [==============================] - 0s 158us/sample - loss: 0.5926 - accuracy: 0.7065 - val_loss: 0.5684 - val_accuracy: 0.6983\n","Epoch 31/150\n","712/712 [==============================] - 0s 170us/sample - loss: 0.5898 - accuracy: 0.7065 - val_loss: 0.5662 - val_accuracy: 0.6983\n","Epoch 32/150\n","712/712 [==============================] - 0s 169us/sample - loss: 0.5871 - accuracy: 0.7079 - val_loss: 0.5641 - val_accuracy: 0.7151\n","Epoch 33/150\n","712/712 [==============================] - 0s 176us/sample - loss: 0.5846 - accuracy: 0.7065 - val_loss: 0.5621 - val_accuracy: 0.7207\n","Epoch 34/150\n","712/712 [==============================] - 0s 168us/sample - loss: 0.5822 - accuracy: 0.7079 - val_loss: 0.5600 - val_accuracy: 0.7207\n","Epoch 35/150\n","712/712 [==============================] - 0s 176us/sample - loss: 0.5798 - accuracy: 0.7107 - val_loss: 0.5580 - val_accuracy: 0.7207\n","Epoch 36/150\n","712/712 [==============================] - 0s 201us/sample - loss: 0.5774 - accuracy: 0.7177 - val_loss: 0.5562 - val_accuracy: 0.7207\n","Epoch 37/150\n","712/712 [==============================] - 0s 165us/sample - loss: 0.5753 - accuracy: 0.7191 - val_loss: 0.5544 - val_accuracy: 0.7263\n","Epoch 38/150\n","712/712 [==============================] - 0s 163us/sample - loss: 0.5730 - accuracy: 0.7233 - val_loss: 0.5525 - val_accuracy: 0.7318\n","Epoch 39/150\n","712/712 [==============================] - 0s 155us/sample - loss: 0.5709 - accuracy: 0.7261 - val_loss: 0.5507 - val_accuracy: 0.7318\n","Epoch 40/150\n","712/712 [==============================] - 0s 161us/sample - loss: 0.5688 - accuracy: 0.7233 - val_loss: 0.5490 - val_accuracy: 0.7374\n","Epoch 41/150\n","712/712 [==============================] - 0s 177us/sample - loss: 0.5669 - accuracy: 0.7219 - val_loss: 0.5473 - val_accuracy: 0.7318\n","Epoch 42/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.5649 - accuracy: 0.7205 - val_loss: 0.5457 - val_accuracy: 0.7318\n","Epoch 43/150\n","712/712 [==============================] - 0s 161us/sample - loss: 0.5630 - accuracy: 0.7191 - val_loss: 0.5441 - val_accuracy: 0.7318\n","Epoch 44/150\n","712/712 [==============================] - 0s 190us/sample - loss: 0.5610 - accuracy: 0.7163 - val_loss: 0.5424 - val_accuracy: 0.7374\n","Epoch 45/150\n","712/712 [==============================] - 0s 169us/sample - loss: 0.5592 - accuracy: 0.7163 - val_loss: 0.5408 - val_accuracy: 0.7374\n","Epoch 46/150\n","712/712 [==============================] - 0s 181us/sample - loss: 0.5574 - accuracy: 0.7163 - val_loss: 0.5392 - val_accuracy: 0.7374\n","Epoch 47/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.5557 - accuracy: 0.7219 - val_loss: 0.5377 - val_accuracy: 0.7430\n","Epoch 48/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.5539 - accuracy: 0.7247 - val_loss: 0.5362 - val_accuracy: 0.7430\n","Epoch 49/150\n","712/712 [==============================] - 0s 164us/sample - loss: 0.5523 - accuracy: 0.7275 - val_loss: 0.5346 - val_accuracy: 0.7486\n","Epoch 50/150\n","712/712 [==============================] - 0s 182us/sample - loss: 0.5507 - accuracy: 0.7303 - val_loss: 0.5331 - val_accuracy: 0.7542\n","Epoch 51/150\n","712/712 [==============================] - 0s 176us/sample - loss: 0.5492 - accuracy: 0.7275 - val_loss: 0.5317 - val_accuracy: 0.7598\n","Epoch 52/150\n","712/712 [==============================] - 0s 175us/sample - loss: 0.5477 - accuracy: 0.7289 - val_loss: 0.5302 - val_accuracy: 0.7598\n","Epoch 53/150\n","712/712 [==============================] - 0s 171us/sample - loss: 0.5462 - accuracy: 0.7346 - val_loss: 0.5287 - val_accuracy: 0.7598\n","Epoch 54/150\n","712/712 [==============================] - 0s 180us/sample - loss: 0.5446 - accuracy: 0.7374 - val_loss: 0.5272 - val_accuracy: 0.7654\n","Epoch 55/150\n","712/712 [==============================] - 0s 165us/sample - loss: 0.5432 - accuracy: 0.7458 - val_loss: 0.5257 - val_accuracy: 0.7654\n","Epoch 56/150\n","712/712 [==============================] - 0s 175us/sample - loss: 0.5418 - accuracy: 0.7472 - val_loss: 0.5245 - val_accuracy: 0.7542\n","Epoch 57/150\n","712/712 [==============================] - 0s 163us/sample - loss: 0.5403 - accuracy: 0.7472 - val_loss: 0.5230 - val_accuracy: 0.7598\n","Epoch 58/150\n","712/712 [==============================] - 0s 164us/sample - loss: 0.5388 - accuracy: 0.7500 - val_loss: 0.5216 - val_accuracy: 0.7598\n","Epoch 59/150\n","712/712 [==============================] - 0s 176us/sample - loss: 0.5374 - accuracy: 0.7500 - val_loss: 0.5201 - val_accuracy: 0.7654\n","Epoch 60/150\n","712/712 [==============================] - 0s 188us/sample - loss: 0.5360 - accuracy: 0.7500 - val_loss: 0.5188 - val_accuracy: 0.7654\n","Epoch 61/150\n","712/712 [==============================] - 0s 178us/sample - loss: 0.5344 - accuracy: 0.7514 - val_loss: 0.5174 - val_accuracy: 0.7654\n","Epoch 62/150\n","712/712 [==============================] - 0s 166us/sample - loss: 0.5330 - accuracy: 0.7542 - val_loss: 0.5160 - val_accuracy: 0.7654\n","Epoch 63/150\n","712/712 [==============================] - 0s 170us/sample - loss: 0.5317 - accuracy: 0.7570 - val_loss: 0.5147 - val_accuracy: 0.7709\n","Epoch 64/150\n","712/712 [==============================] - 0s 171us/sample - loss: 0.5303 - accuracy: 0.7570 - val_loss: 0.5133 - val_accuracy: 0.7709\n","Epoch 65/150\n","712/712 [==============================] - 0s 176us/sample - loss: 0.5290 - accuracy: 0.7570 - val_loss: 0.5119 - val_accuracy: 0.7654\n","Epoch 66/150\n","712/712 [==============================] - 0s 177us/sample - loss: 0.5276 - accuracy: 0.7584 - val_loss: 0.5106 - val_accuracy: 0.7654\n","Epoch 67/150\n","712/712 [==============================] - 0s 163us/sample - loss: 0.5262 - accuracy: 0.7598 - val_loss: 0.5092 - val_accuracy: 0.7654\n","Epoch 68/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.5249 - accuracy: 0.7626 - val_loss: 0.5078 - val_accuracy: 0.7654\n","Epoch 69/150\n","712/712 [==============================] - 0s 179us/sample - loss: 0.5236 - accuracy: 0.7626 - val_loss: 0.5064 - val_accuracy: 0.7654\n","Epoch 70/150\n","712/712 [==============================] - 0s 164us/sample - loss: 0.5222 - accuracy: 0.7640 - val_loss: 0.5050 - val_accuracy: 0.7654\n","Epoch 71/150\n","712/712 [==============================] - 0s 179us/sample - loss: 0.5209 - accuracy: 0.7640 - val_loss: 0.5036 - val_accuracy: 0.7654\n","Epoch 72/150\n","712/712 [==============================] - 0s 165us/sample - loss: 0.5195 - accuracy: 0.7697 - val_loss: 0.5023 - val_accuracy: 0.7821\n","Epoch 73/150\n","712/712 [==============================] - 0s 185us/sample - loss: 0.5183 - accuracy: 0.7697 - val_loss: 0.5011 - val_accuracy: 0.7821\n","Epoch 74/150\n","712/712 [==============================] - 0s 184us/sample - loss: 0.5170 - accuracy: 0.7739 - val_loss: 0.4997 - val_accuracy: 0.7821\n","Epoch 75/150\n","712/712 [==============================] - 0s 158us/sample - loss: 0.5157 - accuracy: 0.7739 - val_loss: 0.4985 - val_accuracy: 0.7821\n","Epoch 76/150\n","712/712 [==============================] - 0s 166us/sample - loss: 0.5145 - accuracy: 0.7739 - val_loss: 0.4975 - val_accuracy: 0.7765\n","Epoch 77/150\n","712/712 [==============================] - 0s 185us/sample - loss: 0.5134 - accuracy: 0.7739 - val_loss: 0.4962 - val_accuracy: 0.7765\n","Epoch 78/150\n","712/712 [==============================] - 0s 159us/sample - loss: 0.5122 - accuracy: 0.7767 - val_loss: 0.4951 - val_accuracy: 0.7765\n","Epoch 79/150\n","712/712 [==============================] - 0s 168us/sample - loss: 0.5110 - accuracy: 0.7767 - val_loss: 0.4938 - val_accuracy: 0.7765\n","Epoch 80/150\n","712/712 [==============================] - 0s 161us/sample - loss: 0.5098 - accuracy: 0.7795 - val_loss: 0.4928 - val_accuracy: 0.7765\n","Epoch 81/150\n","712/712 [==============================] - 0s 178us/sample - loss: 0.5086 - accuracy: 0.7795 - val_loss: 0.4916 - val_accuracy: 0.7709\n","Epoch 82/150\n","712/712 [==============================] - 0s 175us/sample - loss: 0.5075 - accuracy: 0.7809 - val_loss: 0.4904 - val_accuracy: 0.7709\n","Epoch 83/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.5063 - accuracy: 0.7809 - val_loss: 0.4892 - val_accuracy: 0.7709\n","Epoch 84/150\n","712/712 [==============================] - 0s 177us/sample - loss: 0.5051 - accuracy: 0.7837 - val_loss: 0.4882 - val_accuracy: 0.7709\n","Epoch 85/150\n","712/712 [==============================] - 0s 188us/sample - loss: 0.5040 - accuracy: 0.7837 - val_loss: 0.4869 - val_accuracy: 0.7709\n","Epoch 86/150\n","712/712 [==============================] - 0s 184us/sample - loss: 0.5029 - accuracy: 0.7837 - val_loss: 0.4857 - val_accuracy: 0.7654\n","Epoch 87/150\n","712/712 [==============================] - 0s 160us/sample - loss: 0.5017 - accuracy: 0.7837 - val_loss: 0.4846 - val_accuracy: 0.7654\n","Epoch 88/150\n","712/712 [==============================] - 0s 164us/sample - loss: 0.5007 - accuracy: 0.7851 - val_loss: 0.4834 - val_accuracy: 0.7654\n","Epoch 89/150\n","712/712 [==============================] - 0s 165us/sample - loss: 0.4997 - accuracy: 0.7851 - val_loss: 0.4823 - val_accuracy: 0.7654\n","Epoch 90/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.4986 - accuracy: 0.7865 - val_loss: 0.4812 - val_accuracy: 0.7654\n","Epoch 91/150\n","712/712 [==============================] - 0s 162us/sample - loss: 0.4976 - accuracy: 0.7865 - val_loss: 0.4799 - val_accuracy: 0.7709\n","Epoch 92/150\n","712/712 [==============================] - 0s 173us/sample - loss: 0.4965 - accuracy: 0.7851 - val_loss: 0.4790 - val_accuracy: 0.7709\n","Epoch 93/150\n","712/712 [==============================] - 0s 188us/sample - loss: 0.4955 - accuracy: 0.7851 - val_loss: 0.4779 - val_accuracy: 0.7765\n","Epoch 94/150\n","712/712 [==============================] - 0s 157us/sample - loss: 0.4945 - accuracy: 0.7837 - val_loss: 0.4769 - val_accuracy: 0.7765\n","Epoch 95/150\n","712/712 [==============================] - 0s 162us/sample - loss: 0.4934 - accuracy: 0.7851 - val_loss: 0.4760 - val_accuracy: 0.7765\n","Epoch 96/150\n","712/712 [==============================] - 0s 160us/sample - loss: 0.4924 - accuracy: 0.7851 - val_loss: 0.4748 - val_accuracy: 0.7877\n","Epoch 97/150\n","712/712 [==============================] - 0s 158us/sample - loss: 0.4914 - accuracy: 0.7837 - val_loss: 0.4738 - val_accuracy: 0.7877\n","Epoch 98/150\n","712/712 [==============================] - 0s 164us/sample - loss: 0.4904 - accuracy: 0.7823 - val_loss: 0.4728 - val_accuracy: 0.7877\n","Epoch 99/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.4895 - accuracy: 0.7823 - val_loss: 0.4718 - val_accuracy: 0.7877\n","Epoch 100/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.4886 - accuracy: 0.7823 - val_loss: 0.4709 - val_accuracy: 0.7877\n","Epoch 101/150\n","712/712 [==============================] - 0s 168us/sample - loss: 0.4877 - accuracy: 0.7823 - val_loss: 0.4700 - val_accuracy: 0.7877\n","Epoch 102/150\n","712/712 [==============================] - 0s 191us/sample - loss: 0.4868 - accuracy: 0.7823 - val_loss: 0.4690 - val_accuracy: 0.7877\n","Epoch 103/150\n","712/712 [==============================] - 0s 166us/sample - loss: 0.4859 - accuracy: 0.7851 - val_loss: 0.4681 - val_accuracy: 0.7877\n","Epoch 104/150\n","712/712 [==============================] - 0s 166us/sample - loss: 0.4852 - accuracy: 0.7823 - val_loss: 0.4671 - val_accuracy: 0.7821\n","Epoch 105/150\n","712/712 [==============================] - 0s 173us/sample - loss: 0.4842 - accuracy: 0.7809 - val_loss: 0.4663 - val_accuracy: 0.7765\n","Epoch 106/150\n","712/712 [==============================] - 0s 162us/sample - loss: 0.4835 - accuracy: 0.7851 - val_loss: 0.4655 - val_accuracy: 0.8156\n","Epoch 107/150\n","712/712 [==============================] - 0s 175us/sample - loss: 0.4826 - accuracy: 0.7935 - val_loss: 0.4647 - val_accuracy: 0.8212\n","Epoch 108/150\n","712/712 [==============================] - 0s 170us/sample - loss: 0.4819 - accuracy: 0.7935 - val_loss: 0.4638 - val_accuracy: 0.8212\n","Epoch 109/150\n","712/712 [==============================] - 0s 164us/sample - loss: 0.4810 - accuracy: 0.7949 - val_loss: 0.4629 - val_accuracy: 0.8212\n","Epoch 110/150\n","712/712 [==============================] - 0s 192us/sample - loss: 0.4802 - accuracy: 0.7935 - val_loss: 0.4621 - val_accuracy: 0.8156\n","Epoch 111/150\n","712/712 [==============================] - 0s 182us/sample - loss: 0.4794 - accuracy: 0.7978 - val_loss: 0.4614 - val_accuracy: 0.8156\n","Epoch 112/150\n","712/712 [==============================] - 0s 160us/sample - loss: 0.4787 - accuracy: 0.7978 - val_loss: 0.4605 - val_accuracy: 0.8156\n","Epoch 113/150\n","712/712 [==============================] - 0s 173us/sample - loss: 0.4779 - accuracy: 0.7949 - val_loss: 0.4598 - val_accuracy: 0.8101\n","Epoch 114/150\n","712/712 [==============================] - 0s 165us/sample - loss: 0.4772 - accuracy: 0.7963 - val_loss: 0.4590 - val_accuracy: 0.8101\n","Epoch 115/150\n","712/712 [==============================] - 0s 169us/sample - loss: 0.4765 - accuracy: 0.7963 - val_loss: 0.4583 - val_accuracy: 0.8101\n","Epoch 116/150\n","712/712 [==============================] - 0s 163us/sample - loss: 0.4759 - accuracy: 0.7978 - val_loss: 0.4575 - val_accuracy: 0.8101\n","Epoch 117/150\n","712/712 [==============================] - 0s 175us/sample - loss: 0.4752 - accuracy: 0.7978 - val_loss: 0.4569 - val_accuracy: 0.8101\n","Epoch 118/150\n","712/712 [==============================] - 0s 213us/sample - loss: 0.4746 - accuracy: 0.7978 - val_loss: 0.4562 - val_accuracy: 0.8101\n","Epoch 119/150\n","712/712 [==============================] - 0s 159us/sample - loss: 0.4738 - accuracy: 0.7978 - val_loss: 0.4554 - val_accuracy: 0.8101\n","Epoch 120/150\n","712/712 [==============================] - 0s 164us/sample - loss: 0.4731 - accuracy: 0.7992 - val_loss: 0.4547 - val_accuracy: 0.8101\n","Epoch 121/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.4724 - accuracy: 0.7978 - val_loss: 0.4541 - val_accuracy: 0.8101\n","Epoch 122/150\n","712/712 [==============================] - 0s 172us/sample - loss: 0.4718 - accuracy: 0.7978 - val_loss: 0.4535 - val_accuracy: 0.8156\n","Epoch 123/150\n","712/712 [==============================] - 0s 163us/sample - loss: 0.4711 - accuracy: 0.7978 - val_loss: 0.4528 - val_accuracy: 0.8156\n","Epoch 124/150\n","712/712 [==============================] - 0s 162us/sample - loss: 0.4705 - accuracy: 0.7978 - val_loss: 0.4521 - val_accuracy: 0.8156\n","Epoch 125/150\n","712/712 [==============================] - 0s 162us/sample - loss: 0.4699 - accuracy: 0.7978 - val_loss: 0.4515 - val_accuracy: 0.8156\n","Epoch 126/150\n","712/712 [==============================] - 0s 162us/sample - loss: 0.4694 - accuracy: 0.7978 - val_loss: 0.4509 - val_accuracy: 0.8156\n","Epoch 127/150\n","712/712 [==============================] - 0s 183us/sample - loss: 0.4688 - accuracy: 0.7978 - val_loss: 0.4502 - val_accuracy: 0.8156\n","Epoch 128/150\n","712/712 [==============================] - 0s 158us/sample - loss: 0.4682 - accuracy: 0.7978 - val_loss: 0.4496 - val_accuracy: 0.8156\n","Epoch 129/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.4676 - accuracy: 0.7978 - val_loss: 0.4491 - val_accuracy: 0.8156\n","Epoch 130/150\n","712/712 [==============================] - 0s 161us/sample - loss: 0.4671 - accuracy: 0.7978 - val_loss: 0.4484 - val_accuracy: 0.8156\n","Epoch 131/150\n","712/712 [==============================] - 0s 169us/sample - loss: 0.4665 - accuracy: 0.7978 - val_loss: 0.4478 - val_accuracy: 0.8156\n","Epoch 132/150\n","712/712 [==============================] - 0s 173us/sample - loss: 0.4660 - accuracy: 0.7978 - val_loss: 0.4472 - val_accuracy: 0.8156\n","Epoch 133/150\n","712/712 [==============================] - 0s 173us/sample - loss: 0.4655 - accuracy: 0.7992 - val_loss: 0.4466 - val_accuracy: 0.8156\n","Epoch 134/150\n","712/712 [==============================] - 0s 170us/sample - loss: 0.4649 - accuracy: 0.8020 - val_loss: 0.4461 - val_accuracy: 0.8156\n","Epoch 135/150\n","712/712 [==============================] - 0s 180us/sample - loss: 0.4644 - accuracy: 0.8020 - val_loss: 0.4455 - val_accuracy: 0.8156\n","Epoch 136/150\n","712/712 [==============================] - 0s 186us/sample - loss: 0.4640 - accuracy: 0.8020 - val_loss: 0.4450 - val_accuracy: 0.8156\n","Epoch 137/150\n","712/712 [==============================] - 0s 179us/sample - loss: 0.4635 - accuracy: 0.8020 - val_loss: 0.4445 - val_accuracy: 0.8156\n","Epoch 138/150\n","712/712 [==============================] - 0s 170us/sample - loss: 0.4630 - accuracy: 0.8020 - val_loss: 0.4440 - val_accuracy: 0.8156\n","Epoch 139/150\n","712/712 [==============================] - 0s 175us/sample - loss: 0.4626 - accuracy: 0.8006 - val_loss: 0.4435 - val_accuracy: 0.8156\n","Epoch 140/150\n","712/712 [==============================] - 0s 174us/sample - loss: 0.4622 - accuracy: 0.8020 - val_loss: 0.4430 - val_accuracy: 0.8156\n","Epoch 141/150\n","712/712 [==============================] - 0s 181us/sample - loss: 0.4618 - accuracy: 0.8006 - val_loss: 0.4426 - val_accuracy: 0.8212\n","Epoch 142/150\n","712/712 [==============================] - 0s 165us/sample - loss: 0.4613 - accuracy: 0.8006 - val_loss: 0.4421 - val_accuracy: 0.8212\n","Epoch 143/150\n","712/712 [==============================] - 0s 180us/sample - loss: 0.4609 - accuracy: 0.8020 - val_loss: 0.4417 - val_accuracy: 0.8212\n","Epoch 144/150\n","712/712 [==============================] - 0s 178us/sample - loss: 0.4605 - accuracy: 0.8020 - val_loss: 0.4413 - val_accuracy: 0.8156\n","Epoch 145/150\n","712/712 [==============================] - 0s 176us/sample - loss: 0.4600 - accuracy: 0.8020 - val_loss: 0.4408 - val_accuracy: 0.8212\n","Epoch 146/150\n","712/712 [==============================] - 0s 169us/sample - loss: 0.4597 - accuracy: 0.8020 - val_loss: 0.4403 - val_accuracy: 0.8212\n","Epoch 147/150\n","712/712 [==============================] - 0s 167us/sample - loss: 0.4593 - accuracy: 0.8020 - val_loss: 0.4398 - val_accuracy: 0.8212\n","Epoch 148/150\n","712/712 [==============================] - 0s 172us/sample - loss: 0.4589 - accuracy: 0.8020 - val_loss: 0.4394 - val_accuracy: 0.8212\n","Epoch 149/150\n","712/712 [==============================] - 0s 162us/sample - loss: 0.4585 - accuracy: 0.8020 - val_loss: 0.4390 - val_accuracy: 0.8212\n","Epoch 150/150\n","712/712 [==============================] - 0s 172us/sample - loss: 0.4582 - accuracy: 0.8020 - val_loss: 0.4385 - val_accuracy: 0.8212\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fe82c7456d8>"]},"metadata":{"tags":[]},"execution_count":95}]},{"cell_type":"markdown","metadata":{"id":"UdCf3E5qYz1O"},"source":["Run this to see how your model has done."]},{"cell_type":"code","metadata":{"id":"JYU1dS_WZFGN","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1572228741977,"user_tz":300,"elapsed":467,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"1e6debb9-8e81-4d9b-dc59-b3bd34b604a5"},"source":["scores = model.evaluate(X_test, y_test)\n","for i in range(len(scores)):\n"," print(\"\\n%s: %.2f%%\" % (model.metrics_names[i], scores[i]*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\r179/1 [==========================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 0s 109us/sample - loss: 0.4218 - accuracy: 0.8212\n","\n","loss: 43.85%\n","\n","accuracy: 82.12%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HbnT3QGiMFQD"},"source":["## Test Time"]},{"cell_type":"markdown","metadata":{"id":"7zLzflaUY8QE"},"source":["Time to test our model on the hold out test dataset provided. Read test.csv into a data from called test_df"]},{"cell_type":"code","metadata":{"id":"ekgufMhS41Rp"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3r3LwkoGZB8O"},"source":["We do the same as before and pre-process our data.Remember to remove the null values as well as normalize the age and fare columns.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"HGRj2Y_MKWNl"},"source":["Remove null values for age and fare"]},{"cell_type":"code","metadata":{"id":"UIuebn8ZJmu8"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Av3nN-hqKZl7"},"source":["Normalize age"]},{"cell_type":"code","metadata":{"id":"i4U2pQ9tKvsT"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JfySyej6KcAL"},"source":["Normalize Fare"]},{"cell_type":"code","metadata":{"id":"s0kln56VK_LB"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"twHtXePmKwWy"},"source":["Extract the same features as before into a variable."]},{"cell_type":"code","metadata":{"id":"kqv3Fl0fLS9i"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mqW0VkEuLKt9"},"source":["Use your model to make predicition on the data. Store the result in a variable called predicitions."]},{"cell_type":"code","metadata":{"id":"DEZrnQukLlcA"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"X01GT0__Lhfq"},"source":["The neural network model will produce values between 0 and 1 that represent the probability of the person surving. We convert those values to either 0 or 1 with those that have less than 50% of surving a 0 and those that have greater a 1."]},{"cell_type":"code","metadata":{"id":"odt-HoJrLaii"},"source":["predicitions = predicitions.squeeze(1)\n","predicitions = np.where(predicitions < 0.5 , 0, 1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"krrKjfe9L7J_"},"source":["Let us look at how our predicitions looks"]},{"cell_type":"code","metadata":{"id":"NfeIHw04Ok5f","colab":{"base_uri":"https://localhost:8080/","height":340},"executionInfo":{"status":"ok","timestamp":1572230292636,"user_tz":300,"elapsed":454,"user":{"displayName":"matthew stone","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBWI_p3LCFfVrVCj-236hb1tpEsRbQjUrQgbHVg=s64","userId":"10051624807540814829"}},"outputId":"0b4c40bd-b56d-4f3a-f742-d3f4b9df6ca4"},"source":["predicitions"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0,\n","       1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,\n","       1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,\n","       1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n","       0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","       1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n","       0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,\n","       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,\n","       0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0,\n","       1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,\n","       0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,\n","       0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0,\n","       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,\n","       0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n","       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0,\n","       0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","       1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,\n","       0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0])"]},"metadata":{"tags":[]},"execution_count":155}]},{"cell_type":"markdown","metadata":{"id":"V0eDi7ZAZnDg"},"source":["## Create a submission csv file"]},{"cell_type":"markdown","metadata":{"id":"w6EFTPSLNIh3"},"source":["Create a data frame with two columns PassengerId and Survived (Try the pd.DataFrame function). The PassengerId column should have the same values as the PassengerId column from the test_df dataframe from above and Survived column should be the predicitions you just created. Create a csv file from this data frame (Try using the .to_csv funtion, however make sure to remove indexes so set to the index flag to false). This should created a csv file, this is what you submit to kaggle."]},{"cell_type":"code","metadata":{"id":"cpSjVS9KLwgr"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LAg6j2S4O5oB"},"source":["## Bonus"]},{"cell_type":"markdown","metadata":{"id":"V0kA-IRRO7be"},"source":["If you wish to get a better accuracy try extracting the sex column as well, note you will need to find some way to convert that column to a numeric column (e.g male=0, female=1)"]}]}